/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "opt_in()void": {
      "call_config": {
        "opt_in": "CALL"
      }
    },
    "write_to_data_box(byte[],byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "purchase_policy(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_claim(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reject_claim(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "review_claim(byte[],byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64)": {
      "structs": {
        "output": {
          "name": "Policy",
          "elements": [
            [
              "customer_address",
              "address"
            ],
            [
              "premium_amount",
              "uint64"
            ],
            [
              "active_status",
              "bool"
            ],
            [
              "registration_date",
              "uint64"
            ],
            [
              "expiration_date",
              "uint64"
            ],
            [
              "claim_status",
              "string"
            ],
            [
              "amount_claimed",
              "uint64"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_coverage_amount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_expiration_timeline(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "opt_in_gora(asset,application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "box_name": {
          "type": "bytes",
          "key": "box_name",
          "descr": ""
        },
        "coverage_amount": {
          "type": "uint64",
          "key": "coverage_amount",
          "descr": "This is the coverage amount"
        },
        "insurer": {
          "type": "bytes",
          "key": "insurer",
          "descr": "The insurer address"
        },
        "policy_expiration_date": {
          "type": "uint64",
          "key": "policy_expiration_date",
          "descr": "Expiration of policy. Default is set to yearly."
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "InsurancedApp",
    "methods": [
      {
        "name": "opt_in",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "write_to_data_box",
        "args": [
          {
            "type": "byte[]",
            "name": "response_type_bytes"
          },
          {
            "type": "byte[]",
            "name": "response_body_bytes"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Bootstrap global state vlaues."
      },
      {
        "name": "purchase_policy",
        "args": [
          {
            "type": "pay",
            "name": "pay_txn"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Buys a new property policy for an account.\nA new policy id is generated to identify the policy once purchased successfully."
      },
      {
        "name": "approve_claim",
        "args": [
          {
            "type": "address",
            "name": "receiver_addr"
          },
          {
            "type": "uint64",
            "name": "coverage_amt"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Approve policy claim"
      },
      {
        "name": "reject_claim",
        "args": [
          {
            "type": "address",
            "name": "receiver_addr"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Reject a policy claim"
      },
      {
        "name": "review_claim",
        "args": [
          {
            "type": "byte[]",
            "name": "response_type_bytes"
          },
          {
            "type": "byte[]",
            "name": "response_body_bytes"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "send_request",
        "args": [
          {
            "type": "uint64",
            "name": "time_of_event"
          },
          {
            "type": "string",
            "name": "location_of_event"
          },
          {
            "type": "byte[]",
            "name": "box_name"
          },
          {
            "type": "byte[]",
            "name": "key"
          },
          {
            "type": "uint64",
            "name": "token_asset_id"
          },
          {
            "type": "(uint32,byte[],uint64)[]",
            "name": "source_arr"
          },
          {
            "type": "uint32",
            "name": "agg_method"
          },
          {
            "type": "byte[]",
            "name": "user_data"
          },
          {
            "type": "application",
            "name": "main_app_reference"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "get_policy",
        "args": [
          {
            "type": "address",
            "name": "addr"
          }
        ],
        "returns": {
          "type": "(address,uint64,bool,uint64,uint64,string,uint64)"
        },
        "desc": "Gets policy for a specific address"
      },
      {
        "name": "update_coverage_amount",
        "args": [
          {
            "type": "uint64",
            "name": "amt"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Update policy coverage amount."
      },
      {
        "name": "update_expiration_timeline",
        "args": [
          {
            "type": "uint64",
            "name": "expiration_timeline"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Update policy expiration timeline."
      },
      {
        "name": "opt_in_gora",
        "args": [
          {
            "type": "asset",
            "name": "asset_reference"
          },
          {
            "type": "application",
            "name": "main_app_reference"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {},
    "desc": "Insurance dApp"
  },
  "bare_call_config": {
    "delete_application": "CALL",
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the InsurancedApp smart contract.
 */
export type InsurancedApp = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'opt_in()void' | 'opt_in', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'write_to_data_box(byte[],byte[])void' | 'write_to_data_box', {
      argsObj: {
        response_type_bytes: Uint8Array
        response_body_bytes: Uint8Array
      }
      argsTuple: [response_type_bytes: Uint8Array, response_body_bytes: Uint8Array]
      returns: void
    }>
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'purchase_policy(pay)void' | 'purchase_policy', {
      argsObj: {
        pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'approve_claim(address,uint64)void' | 'approve_claim', {
      argsObj: {
        receiver_addr: string
        coverage_amt: bigint | number
      }
      argsTuple: [receiver_addr: string, coverage_amt: bigint | number]
      returns: void
    }>
    & Record<'reject_claim(address)void' | 'reject_claim', {
      argsObj: {
        receiver_addr: string
      }
      argsTuple: [receiver_addr: string]
      returns: void
    }>
    & Record<'review_claim(byte[],byte[])void' | 'review_claim', {
      argsObj: {
        response_type_bytes: Uint8Array
        response_body_bytes: Uint8Array
      }
      argsTuple: [response_type_bytes: Uint8Array, response_body_bytes: Uint8Array]
      returns: void
    }>
    & Record<'send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void' | 'send_request', {
      argsObj: {
        time_of_event: bigint | number
        location_of_event: string
        box_name: Uint8Array
        key: Uint8Array
        token_asset_id: bigint | number
        source_arr: [number, Uint8Array, bigint | number][]
        agg_method: number
        user_data: Uint8Array
        main_app_reference: number | bigint
      }
      argsTuple: [time_of_event: bigint | number, location_of_event: string, box_name: Uint8Array, key: Uint8Array, token_asset_id: bigint | number, source_arr: [number, Uint8Array, bigint | number][], agg_method: number, user_data: Uint8Array, main_app_reference: number | bigint]
      returns: void
    }>
    & Record<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64)' | 'get_policy', {
      argsObj: {
        addr: string
      }
      argsTuple: [addr: string]
      returns: Policy
    }>
    & Record<'update_coverage_amount(uint64)void' | 'update_coverage_amount', {
      argsObj: {
        amt: bigint | number
      }
      argsTuple: [amt: bigint | number]
      returns: void
    }>
    & Record<'update_expiration_timeline(uint64)void' | 'update_expiration_timeline', {
      argsObj: {
        expiration_timeline: bigint | number
      }
      argsTuple: [expiration_timeline: bigint | number]
      returns: void
    }>
    & Record<'opt_in_gora(asset,application)void' | 'opt_in_gora', {
      argsObj: {
        asset_reference: number | bigint
        main_app_reference: number | bigint
      }
      argsTuple: [asset_reference: number | bigint, main_app_reference: number | bigint]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'box_name'?: BinaryState
      /**
       * This is the coverage amount
       */
      'coverage_amount'?: IntegerState
      /**
       * The insurer address
       */
      'insurer'?: BinaryState
      /**
       * Expiration of policy. Default is set to yearly.
       */
      'policy_expiration_date'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type InsurancedAppSig = keyof InsurancedApp['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends InsurancedAppSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Policy result as a struct
 */
export type Policy = {
  customer_address: string
  premium_amount: bigint
  active_status: boolean
  registration_date: bigint
  expiration_date: bigint
  claim_status: string
  amount_claimed: bigint
}
/**
 * Converts the tuple representation of a Policy to the struct representation
 */
export function Policy([customer_address, premium_amount, active_status, registration_date, expiration_date, claim_status, amount_claimed]: [string, bigint, boolean, bigint, bigint, string, bigint] ) {
  return {
    customer_address,
    premium_amount,
    active_status,
    registration_date,
    expiration_date,
    claim_status,
    amount_claimed,
  }
}
/**
 * Maps a method signature from the InsurancedApp smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends InsurancedAppSig> = InsurancedApp['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the InsurancedApp smart contract to the method's return type
 */
export type MethodReturn<TSignature extends InsurancedAppSig> = InsurancedApp['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type InsurancedAppCreateCalls = (typeof InsurancedAppCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type InsurancedAppCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type InsurancedAppDeleteCalls = (typeof InsurancedAppCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type InsurancedAppDeleteCallParams =
  | TypedCallParams<undefined>
/**
 * Defines arguments required for the deploy method.
 */
export type InsurancedAppDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: InsurancedAppCreateCalls) => InsurancedAppCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: InsurancedAppDeleteCalls) => InsurancedAppDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class InsurancedAppCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the InsurancedApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the InsurancedApp smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the InsurancedApp smart contract using the opt_in()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      optIn(args: MethodArgs<'opt_in()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'opt_in()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the write_to_data_box(byte[],byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static writeToDataBox(args: MethodArgs<'write_to_data_box(byte[],byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'write_to_data_box(byte[],byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.response_type_bytes, args.response_body_bytes],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * Bootstrap global state vlaues.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the purchase_policy(pay)void ABI method
   *
   * Buys a new property policy for an account.
A new policy id is generated to identify the policy once purchased successfully.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static purchasePolicy(args: MethodArgs<'purchase_policy(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'purchase_policy(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.pay_txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_claim(address,uint64)void ABI method
   *
   * Approve policy claim
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveClaim(args: MethodArgs<'approve_claim(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_claim(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.receiver_addr, args.coverage_amt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reject_claim(address)void ABI method
   *
   * Reject a policy claim
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static rejectClaim(args: MethodArgs<'reject_claim(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reject_claim(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.receiver_addr],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the review_claim(byte[],byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static reviewClaim(args: MethodArgs<'review_claim(byte[],byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'review_claim(byte[],byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.response_type_bytes, args.response_body_bytes],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendRequest(args: MethodArgs<'send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.time_of_event, args.location_of_event, args.box_name, args.key, args.token_asset_id, args.source_arr, args.agg_method, args.user_data, args.main_app_reference],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64) ABI method
   *
   * Gets policy for a specific address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPolicy(args: MethodArgs<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.addr],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_coverage_amount(uint64)void ABI method
   *
   * Update policy coverage amount.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateCoverageAmount(args: MethodArgs<'update_coverage_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_coverage_amount(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_expiration_timeline(uint64)void ABI method
   *
   * Update policy expiration timeline.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateExpirationTimeline(args: MethodArgs<'update_expiration_timeline(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_expiration_timeline(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.expiration_timeline],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the opt_in_gora(asset,application)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInGora(args: MethodArgs<'opt_in_gora(asset,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'opt_in_gora(asset,application)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset_reference, args.main_app_reference],
      ...params,
    }
  }
}

/**
 * A client to make calls to the InsurancedApp smart contract
 */
export class InsurancedAppClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `InsurancedAppClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof InsurancedApp['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the InsurancedApp smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: InsurancedAppDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(InsurancedAppCallFactory.create)
    const deleteArgs = params.deleteCall?.(InsurancedAppCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the InsurancedApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the InsurancedApp smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The delete result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.delete(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the InsurancedApp smart contract using the opt_in()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The optIn result
       */
      async optIn(args: MethodArgs<'opt_in()void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'opt_in()void'>>> {
        return $this.mapReturnValue(await $this.appClient.optIn(InsurancedAppCallFactory.optIn.optIn(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the InsurancedApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the write_to_data_box(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public writeToDataBox(args: MethodArgs<'write_to_data_box(byte[],byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.writeToDataBox(args, params))
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Bootstrap global state vlaues.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the purchase_policy(pay)void ABI method.
   *
   * Buys a new property policy for an account.
A new policy id is generated to identify the policy once purchased successfully.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public purchasePolicy(args: MethodArgs<'purchase_policy(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.purchasePolicy(args, params))
  }

  /**
   * Calls the approve_claim(address,uint64)void ABI method.
   *
   * Approve policy claim
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveClaim(args: MethodArgs<'approve_claim(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.approveClaim(args, params))
  }

  /**
   * Calls the reject_claim(address)void ABI method.
   *
   * Reject a policy claim
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public rejectClaim(args: MethodArgs<'reject_claim(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.rejectClaim(args, params))
  }

  /**
   * Calls the review_claim(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public reviewClaim(args: MethodArgs<'review_claim(byte[],byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.reviewClaim(args, params))
  }

  /**
   * Calls the send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendRequest(args: MethodArgs<'send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.sendRequest(args, params))
  }

  /**
   * Calls the get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64) ABI method.
   *
   * Gets policy for a specific address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPolicy(args: MethodArgs<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.getPolicy(args, params), Policy)
  }

  /**
   * Calls the update_coverage_amount(uint64)void ABI method.
   *
   * Update policy coverage amount.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateCoverageAmount(args: MethodArgs<'update_coverage_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.updateCoverageAmount(args, params))
  }

  /**
   * Calls the update_expiration_timeline(uint64)void ABI method.
   *
   * Update policy expiration timeline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateExpirationTimeline(args: MethodArgs<'update_expiration_timeline(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.updateExpirationTimeline(args, params))
  }

  /**
   * Calls the opt_in_gora(asset,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInGora(args: MethodArgs<'opt_in_gora(asset,application)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(InsurancedAppCallFactory.optInGora(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<InsurancedApp['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get box_name() {
        return InsurancedAppClient.getBinaryState(state, 'box_name')
      },
      get coverage_amount() {
        return InsurancedAppClient.getIntegerState(state, 'coverage_amount')
      },
      get insurer() {
        return InsurancedAppClient.getBinaryState(state, 'insurer')
      },
      get policy_expiration_date() {
        return InsurancedAppClient.getIntegerState(state, 'policy_expiration_date')
      },
    }
  }

  public compose(): InsurancedAppComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      writeToDataBox(args: MethodArgs<'write_to_data_box(byte[],byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.writeToDataBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      purchasePolicy(args: MethodArgs<'purchase_policy(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.purchasePolicy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveClaim(args: MethodArgs<'approve_claim(address,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveClaim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      rejectClaim(args: MethodArgs<'reject_claim(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.rejectClaim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      reviewClaim(args: MethodArgs<'review_claim(byte[],byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.reviewClaim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendRequest(args: MethodArgs<'send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPolicy(args: MethodArgs<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPolicy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Policy)
        return this
      },
      updateCoverageAmount(args: MethodArgs<'update_coverage_amount(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateCoverageAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateExpirationTimeline(args: MethodArgs<'update_expiration_timeline(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateExpirationTimeline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optInGora(args: MethodArgs<'opt_in_gora(asset,application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInGora(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.delete.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          optIn(args: MethodArgs<'opt_in()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.optIn.optIn(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as InsurancedAppComposer
  }
}
export type InsurancedAppComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the write_to_data_box(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  writeToDataBox(args: MethodArgs<'write_to_data_box(byte[],byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'write_to_data_box(byte[],byte[])void'>]>

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Bootstrap global state vlaues.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'bootstrap()void'>]>

  /**
   * Calls the purchase_policy(pay)void ABI method.
   *
   * Buys a new property policy for an account.
A new policy id is generated to identify the policy once purchased successfully.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchasePolicy(args: MethodArgs<'purchase_policy(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'purchase_policy(pay)void'>]>

  /**
   * Calls the approve_claim(address,uint64)void ABI method.
   *
   * Approve policy claim
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveClaim(args: MethodArgs<'approve_claim(address,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'approve_claim(address,uint64)void'>]>

  /**
   * Calls the reject_claim(address)void ABI method.
   *
   * Reject a policy claim
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rejectClaim(args: MethodArgs<'reject_claim(address)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'reject_claim(address)void'>]>

  /**
   * Calls the review_claim(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reviewClaim(args: MethodArgs<'review_claim(byte[],byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'review_claim(byte[],byte[])void'>]>

  /**
   * Calls the send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendRequest(args: MethodArgs<'send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'send_request(uint64,string,byte[],byte[],uint64,(uint32,byte[],uint64)[],uint32,byte[],application)void'>]>

  /**
   * Calls the get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64) ABI method.
   *
   * Gets policy for a specific address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPolicy(args: MethodArgs<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64)'>]>

  /**
   * Calls the update_coverage_amount(uint64)void ABI method.
   *
   * Update policy coverage amount.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateCoverageAmount(args: MethodArgs<'update_coverage_amount(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'update_coverage_amount(uint64)void'>]>

  /**
   * Calls the update_expiration_timeline(uint64)void ABI method.
   *
   * Update policy expiration timeline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateExpirationTimeline(args: MethodArgs<'update_expiration_timeline(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'update_expiration_timeline(uint64)void'>]>

  /**
   * Calls the opt_in_gora(asset,application)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInGora(args: MethodArgs<'opt_in_gora(asset,application)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, MethodReturn<'opt_in_gora(asset,application)void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the InsurancedApp smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, undefined]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the InsurancedApp smart contract using the opt_in()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    optIn(args: MethodArgs<'opt_in()void'>, params?: AppClientCallCoreParams): InsurancedAppComposer<[...TReturns, MethodReturn<'opt_in()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the InsurancedApp smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): InsurancedAppComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): InsurancedAppComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<InsurancedAppComposerResults<TReturns>>
}
export type InsurancedAppComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
