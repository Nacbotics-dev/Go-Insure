{
    "hints": {
        "addFunding(pay,string,string,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "donateFunds(pay,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "editFunding(uint64,string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getLengthOfFundings()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getSpecificFunding(uint64)(address,string,string,uint64,uint64,uint64)": {
            "structs": {
                "output": {
                    "name": "Funding",
                    "elements": [
                        [
                            "owner",
                            "address"
                        ],
                        [
                            "name",
                            "string"
                        ],
                        [
                            "description",
                            "string"
                        ],
                        [
                            "date",
                            "uint64"
                        ],
                        [
                            "amountNeeded",
                            "uint64"
                        ],
                        [
                            "amountRaised",
                            "uint64"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "funding_id": {
                    "type": "uint64",
                    "key": "funding_id",
                    "descr": ""
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "KrowdFund",
        "methods": [
            {
                "name": "addFunding",
                "args": [
                    {
                        "type": "pay",
                        "name": "seed"
                    },
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "string",
                        "name": "description"
                    },
                    {
                        "type": "uint64",
                        "name": "amountNeeded"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "create new funding"
            },
            {
                "name": "donateFunds",
                "args": [
                    {
                        "type": "pay",
                        "name": "seed"
                    },
                    {
                        "type": "uint64",
                        "name": "idx"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Donate to a funding"
            },
            {
                "name": "editFunding",
                "args": [
                    {
                        "type": "uint64",
                        "name": "idx"
                    },
                    {
                        "type": "string",
                        "name": "name"
                    },
                    {
                        "type": "string",
                        "name": "description"
                    }
                ],
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getLengthOfFundings",
                "args": [],
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getSpecificFunding",
                "args": [
                    {
                        "type": "uint64",
                        "name": "idx"
                    }
                ],
                "returns": {
                    "type": "(address,string,string,uint64,uint64,uint64)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}