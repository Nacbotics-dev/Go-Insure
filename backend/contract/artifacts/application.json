{
    "hints": {
        "bootstrap()void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "purchase_policy(pay,string,string,string)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "approve_claim()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "reject_claim()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)": {
            "structs": {
                "output": {
                    "name": "Policy",
                    "elements": [
                        [
                            "customer_address",
                            "address"
                        ],
                        [
                            "premium_amount",
                            "uint64"
                        ],
                        [
                            "active_status",
                            "bool"
                        ],
                        [
                            "registration_date",
                            "uint64"
                        ],
                        [
                            "expiration_date",
                            "uint64"
                        ],
                        [
                            "claim_status",
                            "string"
                        ],
                        [
                            "amount_claimed",
                            "uint64"
                        ],
                        [
                            "area",
                            "string"
                        ],
                        [
                            "state",
                            "string"
                        ],
                        [
                            "country",
                            "string"
                        ]
                    ]
                }
            },
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_coverage_amount(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update_expiration_timeline(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "coverage_amount": {
                    "type": "uint64",
                    "key": "coverage_amount",
                    "descr": "This is the coverage amount"
                },
                "insurer": {
                    "type": "bytes",
                    "key": "insurer",
                    "descr": "The insurer address"
                },
                "policy_expiration_date": {
                    "type": "uint64",
                    "key": "policy_expiration_date",
                    "descr": "Expiration of policy. Default is set to yearly."
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "InsurancedApp",
        "methods": [
            {
                "name": "bootstrap",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Bootstrap global state vlaues."
            },
            {
                "name": "purchase_policy",
                "args": [
                    {
                        "type": "pay",
                        "name": "pay_txn"
                    },
                    {
                        "type": "string",
                        "name": "area"
                    },
                    {
                        "type": "string",
                        "name": "state"
                    },
                    {
                        "type": "string",
                        "name": "country"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Buys a new property policy for an account.\nA new policy id is generated to identify the policy once purchased successfully."
            },
            {
                "name": "approve_claim",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Approve policy claim"
            },
            {
                "name": "reject_claim",
                "args": [],
                "returns": {
                    "type": "void"
                },
                "desc": "Reject a policy claim"
            },
            {
                "name": "get_policy",
                "args": [
                    {
                        "type": "address",
                        "name": "addr"
                    }
                ],
                "returns": {
                    "type": "(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)"
                },
                "desc": "Gets policy for a specific address"
            },
            {
                "name": "update_coverage_amount",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amt"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Update policy coverage amount."
            },
            {
                "name": "update_expiration_timeline",
                "args": [
                    {
                        "type": "uint64",
                        "name": "expiration_timeline"
                    }
                ],
                "returns": {
                    "type": "void"
                },
                "desc": "Update policy expiration timeline."
            }
        ],
        "networks": {},
        "desc": "Insurance dApp"
    },
    "bare_call_config": {}
}